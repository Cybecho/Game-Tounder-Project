// ⚡ Electric Skill System - 전기 관련 스킬들
export class ElectricSkillSystem {
    constructor(gameScene) {
        this.game = gameScene;
        this.activeRandomLightning = null;
        this.lightningStrikeCount = 0;
    }
    
    // 전기 체인 공격 스킬 (50% 확률, 최대 3회 전이)
    triggerElectricChain(hitEnemy, skillLevel = 1) {
        // 50% 확률 체크
        if (Math.random() > 0.5) {
            return false;
        }
        
        if (!hitEnemy || !hitEnemy.active) {
            return false;
        }
        
        console.log(`⚡ 전기 체인 발동! 레벨: ${skillLevel}, 시작점: ${hitEnemy.enemyType || 'unknown'}`);
        
        // 체인 라이트닝 시스템이 있는지 확인
        if (!this.game.chainLightningSystem) {
            console.warn('⚠️ ChainLightningSystem이 없어서 전기 체인 실행 불가');
            return false;
        }
        
        // 스킬 레벨에 따른 설정 조정
        const chainConfig = {
            maxJumps: Math.min(3, skillLevel + 2), // 최대 3회 전이 (레벨업시 증가)
            maxRange: 150 + (skillLevel * 25), // 레벨당 범위 증가
            damage: 8 + (skillLevel * 2), // 레벨당 데미지 증가
            damageDecay: 0.85, // 약간 더 보존적인 데미지 감소
            duration: 120 // 약간 빠른 체인
        };
        
        // 체인 실행
        const success = this.game.chainLightningSystem.executeChainLightning(\n            hitEnemy,\n            hitEnemy.x,\n            hitEnemy.y,\n            chainConfig\n        );
        
        if (success) {
            // 스킬 발동 시각적 표시
            this.showElectricChainActivation(hitEnemy.x, hitEnemy.y, skillLevel);
        }
        
        return success;
    }
    
    // 랜덤 번개 내리치기 스킬 (중첩형, 최대 3회)
    activateRandomLightning(skillLevel = 1, duration = 15000) {
        console.log(`🌩️ 랜덤 번개 활성화! 레벨: ${skillLevel}, 지속시간: ${duration}ms`);
        
        // 기존 랜덤 번개가 있다면 정리
        if (this.activeRandomLightning) {
            this.activeRandomLightning.destroy();\n        }\n        
        // 스킬 레벨에 따른 설정
        const lightningConfig = {\n            level: skillLevel,\n            strikeInterval: Math.max(1000, 3000 - (skillLevel * 500)), // 레벨당 더 자주 (1초~3초)\n            strikesPerWave: skillLevel, // 레벨당 동시 번개 수 증가\n            damage: 12 + (skillLevel * 3), // 레벨당 데미지 증가\n            range: 80 + (skillLevel * 20) // 레벨당 범위 증가\n        };\n        \n        let remainingTime = duration;\n        \n        // 랜덤 번개 타이머 시작\n        this.activeRandomLightning = this.game.time.addEvent({\n            delay: lightningConfig.strikeInterval,\n            callback: () => {\n                if (this.game.player && this.game.player.active && !this.game.isSkillSelectionActive) {\n                    this.executeRandomLightningStrike(lightningConfig);\n                }\n                \n                remainingTime -= lightningConfig.strikeInterval;\n                if (remainingTime <= 0) {\n                    console.log('🌩️ 랜덤 번개 지속시간 종료');\n                    if (this.activeRandomLightning) {\n                        this.activeRandomLightning.destroy();\n                        this.activeRandomLightning = null;\n                    }\n                }\n            },\n            repeat: Math.floor(duration / lightningConfig.strikeInterval)\n        });\n        \n        // 스킬 활성화 시각적 표시\n        this.showRandomLightningActivation(skillLevel, duration);\n        \n        return true;\n    }\n    \n    // 개별 번개 내리치기 실행\n    executeRandomLightningStrike(config) {\n        const strikesThisWave = config.strikesPerWave;\n        \n        for (let i = 0; i < strikesThisWave; i++) {\n            // 약간의 딜레이를 두고 번개 발생\n            this.game.time.delayedCall(i * 100, () => {\n                this.createSingleLightningStrike(config);\n            });\n        }\n    }\n    \n    // 단일 번개 내리치기 생성\n    createSingleLightningStrike(config) {\n        // 랜덤 위치 선택 (플레이어 주변 또는 적이 많은 곳)\n        const strikePos = this.selectOptimalStrikePosition(config.range * 3);\n        \n        if (!strikePos) return;\n        \n        this.lightningStrikeCount++;\n        \n        console.log(`⚡ 번개 내리치기 #${this.lightningStrikeCount}: (${Math.round(strikePos.x)}, ${Math.round(strikePos.y)})`);\n        \n        // 번개 경고 효과 (0.5초 전)\n        this.createLightningWarning(strikePos.x, strikePos.y);\n        \n        // 0.5초 후 실제 번개 발생\n        this.game.time.delayedCall(500, () => {\n            this.createLightningStrike(strikePos.x, strikePos.y, config);\n        });\n    }\n    \n    // 최적 번개 위치 선택\n    selectOptimalStrikePosition(searchRadius) {\n        const playerX = this.game.player.x;\n        const playerY = this.game.player.y;\n        \n        // 근처 적들 찾기\n        const nearbyEnemies = [];\n        this.game.enemies.children.entries.forEach(enemy => {\n            if (enemy.active) {\n                const distance = Phaser.Math.Distance.Between(\n                    playerX, playerY, enemy.x, enemy.y\n                );\n                if (distance <= searchRadius) {\n                    nearbyEnemies.push({\n                        enemy: enemy,\n                        distance: distance\n                    });\n                }\n            }\n        });\n        \n        if (nearbyEnemies.length === 0) {\n            // 적이 없으면 플레이어 주변 랜덤 위치\n            const angle = Math.random() * Math.PI * 2;\n            const distance = 100 + Math.random() * 200;\n            return {\n                x: playerX + Math.cos(angle) * distance,\n                y: playerY + Math.sin(angle) * distance\n            };\n        }\n        \n        // 적들 중에서 랜덤 선택 (가까운 적에게 가중치)\n        const totalWeight = nearbyEnemies.reduce((sum, item) => {\n            const weight = Math.max(1, searchRadius - item.distance);\n            return sum + weight;\n        }, 0);\n        \n        let randomValue = Math.random() * totalWeight;\n        for (let item of nearbyEnemies) {\n            const weight = Math.max(1, searchRadius - item.distance);\n            randomValue -= weight;\n            if (randomValue <= 0) {\n                return {\n                    x: item.enemy.x + (Math.random() - 0.5) * 60, // 약간의 랜덤성\n                    y: item.enemy.y + (Math.random() - 0.5) * 60\n                };\n            }\n        }\n        \n        // 폴백: 첫 번째 적 위치\n        const firstEnemy = nearbyEnemies[0].enemy;\n        return {\n            x: firstEnemy.x,\n            y: firstEnemy.y\n        };\n    }\n    \n    // 번개 경고 효과\n    createLightningWarning(x, y) {\n        // 붉은 원형 경고\n        const warning = this.game.add.circle(x, y, 40, 0xff4444, 0.3);\n        warning.setStrokeStyle(3, 0xff0000, 0.8);\n        \n        // 깜빡이는 효과\n        this.game.tweens.add({\n            targets: warning,\n            alpha: 0.1,\n            duration: 250,\n            yoyo: true,\n            repeat: 1,\n            onComplete: () => warning.destroy()\n        });\n    }\n    \n    // 실제 번개 내리치기\n    createLightningStrike(x, y, config) {\n        // 번개 시각 효과\n        this.createLightningStrikeEffect(x, y);\n        \n        // 범위 내 적들에게 데미지\n        let hitCount = 0;\n        this.game.enemies.children.entries.forEach(enemy => {\n            if (enemy.active) {\n                const distance = Phaser.Math.Distance.Between(x, y, enemy.x, enemy.y);\n                if (distance <= config.range) {\n                    // 데미지 적용\n                    enemy.health -= config.damage;\n                    hitCount++;\n                    \n                    // 데미지 표시\n                    if (this.game.showDamageNumber) {\n                        this.game.showDamageNumber(enemy.x, enemy.y - 30, config.damage, 0xffff00);\n                    }\n                    \n                    // 감전 효과\n                    if (this.game.applyElectrifyEffect) {\n                        this.game.applyElectrifyEffect(enemy);\n                    }\n                    \n                    // 적 처치 처리\n                    if (enemy.health <= 0) {\n                        this.game.createExplosion(enemy.x, enemy.y);\n                        \n                        // 에너지 오브 생성\n                        const energyOrb = this.game.physics.add.sprite(enemy.x, enemy.y, 'energy');\n                        this.game.energy.add(energyOrb);\n                        \n                        // 점수 추가\n                        const points = this.game.getEnemyPoints ? this.game.getEnemyPoints(enemy.enemyType) : 100;\n                        this.game.score += points;\n                        \n                        enemy.destroy();\n                    }\n                }\n            }\n        });\n        \n        console.log(`⚡ 번개 내리치기 완료: ${hitCount}마리 타격`);\n    }\n    \n    // 번개 내리치기 시각 효과\n    createLightningStrikeEffect(x, y) {\n        // 메인 번개 기둥\n        const lightning = this.game.add.graphics();\n        lightning.lineStyle(6, 0xffff00, 1.0);\n        \n        // 하늘에서 내려오는 번개\n        const startY = y - 300;\n        const segments = 8;\n        const deviation = 25;\n        \n        let points = [{x: x, y: startY}];\n        \n        // 지그재그 포인트들 생성\n        for (let i = 1; i < segments; i++) {\n            const progress = i / segments;\n            const currentY = startY + (y - startY) * progress;\n            const randomX = x + (Math.random() - 0.5) * deviation * (1 - progress);\n            \n            points.push({x: randomX, y: currentY});\n        }\n        \n        points.push({x: x, y: y});\n        \n        // 번개 그리기\n        lightning.beginPath();\n        lightning.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            lightning.lineTo(points[i].x, points[i].y);\n        }\n        lightning.strokePath();\n        \n        // 글로우 효과\n        const glow = this.game.add.graphics();\n        glow.lineStyle(15, 0x87ceeb, 0.4);\n        glow.beginPath();\n        glow.moveTo(points[0].x, points[0].y);\n        for (let i = 1; i < points.length; i++) {\n            glow.lineTo(points[i].x, points[i].y);\n        }\n        glow.strokePath();\n        \n        // 타격 지점 폭발\n        const explosion = this.game.add.circle(x, y, 20, 0xffff00, 0.8);\n        \n        // 애니메이션\n        this.game.tweens.add({\n            targets: [lightning, glow],\n            alpha: 0,\n            duration: 400,\n            onComplete: () => {\n                lightning.destroy();\n                glow.destroy();\n            }\n        });\n        \n        this.game.tweens.add({\n            targets: explosion,\n            scaleX: 3,\n            scaleY: 3,\n            alpha: 0,\n            duration: 500,\n            onComplete: () => explosion.destroy()\n        });\n        \n        // 스파크 파티클\n        this.createSparkParticles(x, y, 15);\n    }\n    \n    // 스파크 파티클 효과\n    createSparkParticles(x, y, count = 10) {\n        for (let i = 0; i < count; i++) {\n            const particle = this.game.add.circle(x, y, 3, 0xffff00, 0.9);\n            \n            const angle = Math.random() * Math.PI * 2;\n            const speed = 50 + Math.random() * 100;\n            const distance = 30 + Math.random() * 50;\n            \n            this.game.tweens.add({\n                targets: particle,\n                x: x + Math.cos(angle) * distance,\n                y: y + Math.sin(angle) * distance,\n                alpha: 0,\n                scaleX: 0.2,\n                scaleY: 0.2,\n                duration: 300 + Math.random() * 300,\n                ease: 'Power2.easeOut',\n                onComplete: () => particle.destroy()\n            });\n        }\n    }\n    \n    // 전기 체인 활성화 표시\n    showElectricChainActivation(x, y, level) {\n        const text = this.game.add.text(x, y - 50, `전기 체인 Lv.${level}!`, {\n            fontSize: '16px',\n            color: '#00aaff',\n            stroke: '#000000',\n            strokeThickness: 2\n        }).setOrigin(0.5);\n        \n        this.game.tweens.add({\n            targets: text,\n            y: y - 80,\n            alpha: 0,\n            duration: 1000,\n            onComplete: () => text.destroy()\n        });\n    }\n    \n    // 랜덤 번개 활성화 표시\n    showRandomLightningActivation(level, duration) {\n        const text = this.game.add.text(this.game.player.x, this.game.player.y - 60, \n            `천둥번개 Lv.${level} 활성화!`, {\n            fontSize: '20px',\n            color: '#ffff00',\n            stroke: '#000000',\n            strokeThickness: 3\n        }).setOrigin(0.5);\n        \n        this.game.tweens.add({\n            targets: text,\n            y: this.game.player.y - 90,\n            alpha: 0,\n            duration: 1500,\n            onComplete: () => text.destroy()\n        });\n    }\n    \n    // 정리 작업\n    cleanup() {\n        if (this.activeRandomLightning) {\n            this.activeRandomLightning.destroy();\n            this.activeRandomLightning = null;\n        }\n    }\n}